# -*- coding: utf-8 -*-
"""프로그래머스_가장 먼 노드.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13jFd52Z55HSi36NfntEdCCoQP0U79lJt
"""

import heapq
def solution(n, edge):
    INF = int(1e6)
    edge.sort()
    graph = [[] for _ in range(len(edge))]
    distance = [INF for _ in range(n + 1)]
    
    for a, b in edge:
        graph[a].append((b, 1))
        graph[b].append((a, 1))
        
    def dijkstra(x):
        distance[x] = 0
        q = []
        heapq.heappush(q, (x, 0))
        
        while q:
            now, dist = heapq.heappop(q)
            
            if distance[now] < dist:
                continue
            
            for i in graph[now]:
                cost = dist + 1
                if cost < distance[i[0]]:
                    distance[i[0]] = cost
                    heapq.heappush(q, (i[0], cost))
        
        max_dist = max(distance[1:])
        res = len([i for i in range(len(distance)) if distance[i] == max_dist])
    
        return res
    
    answer = dijkstra(1)
    
    return answer