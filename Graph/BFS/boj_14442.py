# -*- coding: utf-8 -*-
"""BOJ_14442.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b1MCIGzNfF0KXuCyPBETAvPa6tbMXpZH
"""

from collections import deque

n, m, k = map(int, input().split())
graph = []
for _ in range(n):
    graph.append(list(int(i) for i in input()))

dist = [[[0] * (k + 1) for _ in range(m)] for _ in range(n)]
dx, dy = [0, 0, 1, -1], [1, -1, 0, 0]

def bfs(x, y, k):
    q = deque()
    dist[0][0][0] = 1
    q.append((0,0,0))

    while q:
        x, y, w = q.popleft()
        if x == n - 1 and y == m - 1:
            return dist[n - 1][m - 1][w]
        
        for i in range(4):
            nx, ny, nw = x + dx[i], y + dy[i], w + 1
            if nx < 0 or nx >= n or ny < 0 or ny >= m:
                continue
            if dist[nx][ny][w]:
                continue
            if graph[nx][ny] == 0:
                dist[nx][ny][w] = dist[x][y][w] + 1
                q.append((nx, ny, w))
            elif graph[nx][ny] == 1 and nw <= k:
                dist[nx][ny][nw] = dist[x][y][w] + 1
                q.append((nx, ny, nw))
    return -1

print(bfs(0, 0, k))

